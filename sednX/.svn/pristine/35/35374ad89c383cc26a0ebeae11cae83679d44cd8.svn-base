package hanibal.ibs.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.log4j.Logger;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.orm.ibatis.SqlMapClientTemplate;

import com.ibatis.sqlmap.client.SqlMapClient;

import hanibal.ibs.library.HanibalWebDev;
import hanibal.ibs.model.cms.FileDTO;
import hanibal.ibs.model.cms.LiveDTO;
import hanibal.ibs.model.cms.PhotoDTO;
import hanibal.ibs.model.cms.VodDTO;
import hanibal.ibs.model.webapi.Carousel;
import hanibal.ibs.model.webapi.MainContents;
import hanibal.ibs.model.webapi.TreeMenu;
public class IbsWebApiDAO {
	Logger log = Logger.getLogger(this.getClass());
	String sednIp;
	String mediaIp;
	String table;
	String repoTable;
	public void setSqlMapper(SqlMapClient sqlMapper) {
	}
	public void setSqlFactory(SqlSessionFactory sqlFactory) {
	}
	
	private SqlSessionTemplate sqlTemplate;	
	public void setSqlTemplate(SqlSessionTemplate sqlTemplate) {
		this.sqlTemplate = sqlTemplate;
	}
	SqlMapClientTemplate sqlMapTemplate;
	public void setSqlMapTemplate(SqlMapClientTemplate sqlMapTemplate) {
		this.sqlMapTemplate = sqlMapTemplate;
	}
	public int checkEmail(String member_email) {
		int count=sqlTemplate.selectOne("checkEmail", member_email);
		return count;
	}
	public int checkPass(String member_email, String member_pass) {
		Map<String, Object> map=new HashMap<String, Object>();
		map.put("member_email", member_email);
		map.put("member_pass", member_pass);
		int count=sqlTemplate.selectOne("checkPass",map);
		return count;
	}
	public int emailConfirm(String key) {
		int count=sqlTemplate.selectOne("confirmEmail",key);
		return count;
	}
	public HashMap<String, Object> getIdxByKey(String key) {
		HashMap<String, Object> hashmap=sqlTemplate.selectOne("getIdxByKey",key);
		return hashmap;
	}
	public void confirmUpdate(int idx, String confirmImage) {
		Map<String,Object> map= new HashMap<String,Object>();	
		map.put("idx",idx);
		map.put("confirmImage", confirmImage);
		sqlTemplate.update("confirmUpdate",map);
	}
	public List<HashMap<String,String>> deleteProfileList(String email) {
		List<HashMap<String,String>>  deleteProfileList=sqlTemplate.selectList("deleteProfileList",email);
		return deleteProfileList;
	}
	public void deleteProfile(String profile) {
		sqlTemplate.delete("deleteProfile",profile);
		
	}
	/**
	 * 
	 * relative TREE START....
	 * 
	 */
	public List<TreeMenu> getMenuTree(String order) {
		table=HanibalWebDev.targetTable(order);
		repoTable=HanibalWebDev.targetRepoTable(order);
		Map<String,Object> map= new HashMap<String,Object>();	
		map.put("table", table);
		map.put("repoTable", repoTable);
		List<TreeMenu> lists=sqlTemplate.selectList("getMenuTree",map);
		return lists;
	}
	public String createGroup(Map<String, Object> commandMap) {
		String newId="";
		table=HanibalWebDev.targetTable(String.valueOf(commandMap.get("sort")));
		commandMap.put("table", table);
		sqlTemplate.insert("insertGroup",commandMap);
		newId=sqlTemplate.selectOne("topIdxVod",table);
		return newId;
	}
	public int renameGroup(Map<String, Object> commandMap) {
		int affectcount=0;
		table=HanibalWebDev.targetTable(String.valueOf(commandMap.get("sort")));
		commandMap.put("table", table);
		affectcount=sqlTemplate.update("updateGroup",commandMap);
		return affectcount;
	}
	public int deleteGroup(Map<String, Object> commandMap) {
		int affectcount=0;
		int[] groupIdArr=null;
		table=HanibalWebDev.targetTable(String.valueOf(commandMap.get("sort")));
		repoTable=HanibalWebDev.targetRepoTable(String.valueOf(commandMap.get("sort")));
		groupIdArr=HanibalWebDev.StringToIntArray(String.valueOf(commandMap.get("groupIdArr")));
		commandMap.put("table", table);
		commandMap.put("repoTable", repoTable);
		commandMap.put("groupIdArr",groupIdArr);
		//1.컨텐츠 소속 변경
		sqlTemplate.update("updateCategoryIdx",commandMap);
		//2.position update
		sqlTemplate.update("updatePosition",commandMap);
		//3.그룹삭제 
		affectcount=sqlTemplate.update("deleteGroup",commandMap);
		return affectcount;
	}
	/**
	 * 
	 * relative TREE END...
	 * 
	 */
	public int vodBoxExist(String file) {
		int count=sqlTemplate.selectOne("vodBoxExist",file);
		return count;
	}
	public void vodBoxInsert(String file) {
		sqlTemplate.insert("vodBoxInsertTemp",file);
	}
	public void updateRate(String file,String newFile, int rate) {
		Map<String,Object> map= new HashMap<String,Object>();	
		map.put("file", file);
		map.put("newFile", newFile);
		map.put("rate", rate);
		sqlTemplate.update("updateEncodingRate",map);
	}
	public int getEncodingRate(String file) {
		int rate=sqlTemplate.selectOne("getEncodingRate",file);
		return rate;
	}
	public List<LiveDTO> getLiveSmList(Map<String, Object> commandMap) {
		List<LiveDTO> lists=sqlTemplate.selectList("getLiveSm",commandMap);
		return lists;
	}
	public List<FileDTO> getFileSmList(Map<String, Object> commandMap) {
		List<FileDTO> lists=sqlTemplate.selectList("getFileSm",commandMap);
		return lists;
	}
	public List<PhotoDTO> getPhotoSmList(Map<String, Object> commandMap) {
		List<PhotoDTO> lists=sqlTemplate.selectList("getPhotoSm",commandMap);
		return lists;
	}
	public List<VodDTO> getVodSmList(Map<String, Object> commandMap) {
		List<VodDTO> lists=sqlTemplate.selectList("getVodSm",commandMap);
		return lists;
	}
	public List<Carousel> getCatouselList() {
		List<Carousel> lists=sqlTemplate.selectList("getCatouselList");
		return lists;
	}
	public List<MainContents> getMainContents() {
		List<MainContents> lists=sqlTemplate.selectList("getMainContents");
		return lists;
	}
		
}
