package hanibal.ibs.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import hanibal.ibs.dao.IbsUserDAO;
import hanibal.ibs.library.HanibalWebDev;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.codehaus.jackson.map.ObjectMapper;

@Controller
public class IbsUserController {
	Logger log = Logger.getLogger(this.getClass());
	ObjectMapper mapper = new ObjectMapper();
	IbsUserDAO ibsUserDAO;
	String repositoryPath;
	String sednIp;
	String mediaIp;
	String dbProperties;
	String returnView;
	String download;
	
	
	
	public String getDownload() {
		return download;
	}
	public void setDownload(String download) {
		this.download = download;
	}
	public void setLog(Logger log) {
		this.log = log;
	}
	public void setIbsUserDAO(IbsUserDAO ibsUserDAO) {
		this.ibsUserDAO = ibsUserDAO;
	}
	public void setRepositoryPath(String repositoryPath) { 
		this.repositoryPath = repositoryPath;
	}
	
	public void setSednIp(String sednIp) {
		this.sednIp = sednIp;
	}
	public void setMediaIp(String mediaIp) {
		this.mediaIp = mediaIp;
	}
	
	public String getDbProperties() {
		return dbProperties;
	}
	public void setDbProperties(String dbProperties) {
		this.dbProperties = dbProperties;
	}
	
	public void setReturnView(String returnView) {
		this.returnView = returnView;
	}
	
	//첫 화면 페이지 
	@RequestMapping("/")
	public String mainIndex(Model model) throws UnknownHostException {
		returnView="/ibsUserViews/IbsUserVodView.user";
		model.addAttribute("permission",repositoryPath);
		Map<String,Object> param = new HashMap<String,Object>();
		String vIp = HanibalWebDev.getIp(); 
		param.put("reg_ip", vIp); 
		param.put("reg_id", "foryousa@naver.com");
		param.put("device", "WEB");
		ibsUserDAO.SednLogInsert(param);
		return returnView;
	}
	
	
	//Live 페이지 
	@RequestMapping("/svc/IbsUserVodView")
	public String IbsUserVodView(Model model){
		returnView="/ibsUserViews/IbsUserVodView2.test"; 
		return returnView;
	}
	
	//Live 페이지 
	@RequestMapping("/svc/liveView")
	public String liveView(Model model){
		returnView="/ibsUserViews/IbsUserLiveView.live"; 
		return returnView;
	}
	
	@RequestMapping("/svc/user/{section}")
	public String webSection(@PathVariable String section,Model model ,@RequestParam String vIndex ) throws UnsupportedEncodingException {
		String returnPage="";
		if(section.equals("vodPlay")) {
			returnPage="/ibsUserViews/IbsUserVodPlay.user";
			model.addAttribute("IDX", vIndex);
		}else if( section.equals("vodMenuChild") || section.equals("vodMenuChildNew") || section.equals("vodMenuChildTitle") || section.equals("vodMenuChildFavorite")) {
			returnPage="/ibsUserViews/IbsUserVodMenuChildView.user";
			model.addAttribute("IDX", vIndex);
		}else if(section.equals("vodUserSearch")) {
			returnPage="/ibsUserViews/IbsUserVodSearchView.user";
			model.addAttribute("Search", URLDecoder.decode(vIndex,"UTF-8"));
		}else if(section.equals("liveUserSearch")) {
			returnView="/ibsUserViews/IbsUserVodSearchView.live"; 
			model.addAttribute("Search", URLDecoder.decode(vIndex,"UTF-8"));
		}
		else if(section.equals("vodMenuParents")) {
			returnPage="/ibsUserViews/IbsUserVodMenuView.user";
			model.addAttribute("IDX", vIndex);
		}else if(section.equals("liveView")) {
			returnPage="/ibsUserViews/IbsUserLiveViewIdx.live"; 
			model.addAttribute("IDX", vIndex);
		}
		model.addAttribute("Flug", section);
		return returnPage;
	}
	
	
	//레이아웃 이미지 가져오기
	@RequestMapping("/svc/layoutImage")
	public void layoutImage(ModelMap mav,HttpServletResponse res) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.layoutImage();
		
		for(int i = 0 ; i < lists.size(); i ++) {
				String datePath = ""; 
				Map<String, Object> map = lists.get(i);
				datePath ="http://"+mediaIp+"/" + "REPOSITORY/CAROUSEL/" + map.get("IMG_NAME");
				map.put("IMG_NAME", datePath);
		}
		
		mav.put("lists",lists); 
		mav.put("repositoryPath",repositoryPath);
		res.getWriter().print(mapper.writeValueAsString(mav));
	} 
	
	//LayoutMenu에 등록 되어있는 vod List 가져오기
	@RequestMapping("/svc/MainLaoutVodList")
	public void MainLaoutVodList(ModelMap mav,HttpServletResponse res , @RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.MainLaoutVodList(commandMap);
		
		for(int i = 0 ; i < lists.size(); i ++) {
				String datePath = ""; 
				Map<String, Object> map = lists.get(i);
				datePath ="http://"+mediaIp+"/" + "REPOSITORY/THUMBNAIL" + HanibalWebDev.getDataPath(String.valueOf(map.get("MAIN_THUMBNAIL").toString())) + map.get("MAIN_THUMBNAIL");
				map.put("MAIN_THUMBNAIL", datePath);
		}
		
		mav.put("lists",lists);  
		mav.put("repositoryPath",repositoryPath);
		res.getWriter().print(mapper.writeValueAsString(mav));
	} 
	
	
	
	//VOD SEARCH, VIEW, MODAL등 데이터 가져오기
	@RequestMapping("/svc/MainVodAllList")
	public void MainVodAllList(ModelMap mav,HttpServletResponse res , @RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.MainVodAllList(commandMap);
		String vFlug = HanibalWebDev.toString((String) commandMap.get("FLUG"));
		for(int i = 0 ; i < lists.size(); i ++) {
			Map<String, Object> map = lists.get(i);
			if(vFlug.equals("SHOW_VIEW")) {
				// VOD 주소로 썸네일 10장 주소 만들기  
				String datePath = ""; 
				datePath ="http://"+mediaIp+"/" + "REPOSITORY/THUMBNAIL" + HanibalWebDev.getDataPath(String.valueOf(map.get("VOD_PATH").toString()));
				map.put("MAIN_THUMBNAIL", datePath);
			}else{
				String datePath = ""; 
				datePath ="http://"+mediaIp+"/" + "REPOSITORY/THUMBNAIL" + HanibalWebDev.getDataPath(String.valueOf(map.get("MAIN_THUMBNAIL").toString())) + map.get("MAIN_THUMBNAIL");
				map.put("MAIN_THUMBNAIL", datePath);
				
			}
			
			String datePath2 = ""; 
			//datePath2 ="http://182.162.172.133:8090/" + "VOD" + HanibalWebDev.getDataPath(String.valueOf(map.get("VOD_PATH"))) + map.get("VOD_PATH")+"/index.m3u8";
			datePath2 ="http://"+mediaIp+"/" + "REPOSITORY/VOD" + HanibalWebDev.getDataPath(String.valueOf(map.get("VOD_PATH"))) + map.get("VOD_PATH");
			map.put("VOD_PATH", datePath2);

		}
		
		mav.put("lists",lists); 
		mav.put("repositoryPath",repositoryPath);
		res.getWriter().print(mapper.writeValueAsString(mav));
	} 
	
	
	
	//MenuBar List
	@RequestMapping("/svc/ShowViewMenuBar")
	public void ShowViewMenuBar(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.ShowViewMenuBar(commandMap);
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	//LayoutMenu title name
	@RequestMapping("/svc/LayoutMenuList")
	public void LayoutMenuList(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.LayoutMenuList(commandMap);
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	//Model에 들어갈 이미지 가져오기
	@RequestMapping("/svc/ModelImageList")
	public void ModelImageList(ModelMap mav,HttpServletResponse res , @RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.ModelImageList(commandMap);
		for(int i = 0 ; i < lists.size(); i ++) {
				String datePath = ""; 
				Map<String, Object> map = lists.get(i);
				datePath ="http://"+mediaIp+"/" + "REPOSITORY/PHOTO" + HanibalWebDev.getDataPath(String.valueOf(map.get("PHOTO_PATH").toString())) + map.get("PHOTO_PATH");
				map.put("PHOTO_PATH", datePath);
		
		}
		
		mav.put("lists",lists); 
		mav.put("repositoryPath",repositoryPath);
		res.getWriter().print(mapper.writeValueAsString(mav));
	} 
	//Model에 들어갈 File가져오기
	@RequestMapping("/svc/ModelFileViewList")
	public void ModelFileViewList(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.ModelFileViewList(commandMap);
		for(int i = 0 ; i < lists.size(); i ++) {
				String datePath = ""; 
				Map<String, Object> map = lists.get(i);
				datePath ="REPOSITORY/FILE" + HanibalWebDev.getDataPath(String.valueOf(map.get("FILE_PATH"))) + map.get("FILE_PATH");
				map.put("FILE_PATH", datePath);
		}
		mav.put("lists",lists); 
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	//좋아요, 플레이어시 1씩 증가 시키기
	@RequestMapping("/svc/VodCountInsert")
	public void VodCountInsert(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		String vFlug = HanibalWebDev.toString((String) commandMap.get("FLUG"));
		if(vFlug.equals("FAVORITE")) {
			ibsUserDAO.VodFavoriteCount(commandMap); 
		}else {
			ibsUserDAO.VodViewCountInsert(commandMap); 
		}	

	}
	
	//자식 MenuBar 클릭 시 Title 가져오기 (BOARD > INFO 용산)
	@RequestMapping("/svc/MenuChildTitle")
	public void MenuChildTitle(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.MenuChildTitle(commandMap);
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	//Search시 keyword가져오기
	@RequestMapping("/svc/MainVodKeyWord")
	public void MainVodKeyWord(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.MainVodKeyWord(commandMap); 
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	//파일 다운로드 
	@RequestMapping("/svc/FileDownlod")
    public void downLoad(@RequestParam String path,HttpServletResponse res,HttpServletRequest req) throws Exception{
        String path2= download + HanibalWebDev.toString(path); 
        ibsUserDAO.fileDownLoad(path2,res,req);

    }
	
	//ChannelData가져오기
	@RequestMapping("/svc/ChannelData")
	public void ChannelData(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.ChannelData(commandMap); 
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	//ChannelData가져오기
	@RequestMapping("/svc/Channel")
	public void Channel(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.Channel(commandMap); 
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	//ChannelData가져오기
	@RequestMapping("/svc/CalendarDate")
	public void CalendarDate(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.CalendarDate(commandMap); 
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	//ChannelData가져오기
	@RequestMapping("/svc/BroadcastingTime")
	public void BroadcastingTime(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.BroadcastingTime(commandMap); 
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	//RePlayClok가져오기
	@RequestMapping("/svc/RePlayClok")
	public void RePlayClok(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.RePlayClok(commandMap); 
		mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
	
	
	
	//	Live Vod가져오기
	@RequestMapping("/svc/VodChannel")
	public void VodChannel(ModelMap mav,HttpServletResponse res,@RequestParam Map<String, Object> commandMap) throws IOException{
		res.setCharacterEncoding("utf8");
		List<Map<String,Object>> lists = ibsUserDAO.VodChannel(commandMap); 
		for(int i = 0 ; i < lists.size(); i ++) {
			Map<String, Object> map = lists.get(i);
			String datePath = ""; 
			//datePath ="http://182.162.172.133:8090" + "/VOD" + HanibalWebDev.getDataPath(String.valueOf(map.get("VOD_PATH"))) + map.get("VOD_PATH")+"/index.m3u8";
			datePath ="http://"+mediaIp+"/" + "REPOSITORY/VOD" + HanibalWebDev.getDataPath(String.valueOf(map.get("VOD_PATH"))) + map.get("VOD_PATH");
			map.put("VOD_PATH", datePath);
			String datePath2 = ""; 
			datePath ="http://"+mediaIp+"/" + "REPOSITORY/THUMBNAIL" + HanibalWebDev.getDataPath(String.valueOf(map.get("MAIN_THUMBNAIL").toString())) + map.get("MAIN_THUMBNAIL");
			map.put("MAIN_THUMBNAIL", datePath2);
		}
			mav.put("lists",lists);  
		res.getWriter().print(mapper.writeValueAsString(mav));
	}
	
 }
